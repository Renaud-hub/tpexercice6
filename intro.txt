<<<<<<< HEAD

ğŸŒ¿ 2. git branch â€“ GÃ©rer les branches
La commande git branch permet de crÃ©er, lister ou supprimer des branches dans un dÃ©pÃ´t Git. Les branches sont utiles pour travailler sur des fonctionnalitÃ©s ou des corrections sans affecter la branche principale.
Exemples dâ€™utilisation :
- git branch â†’ affiche toutes les branches locales
- git branch nouvelle-branche â†’ crÃ©e une nouvelle branche
- git branch -d ancienne-branche â†’ supprime une branche locale
Ã€ retenir :
- Pour changer de branche, on utilise git checkout nom-de-branche ou git switch nom-de-branche.
- Les branches permettent de travailler en parallÃ¨le et de fusionner les changements plus tard avec git merge.
=======
La commande git add sert Ã  prÃ©parer les fichiers pour le prochain commit. Elle ajoute les modifications (nouvelles, modifiÃ©es ou supprimÃ©es) Ã  lâ€™index (ou "staging area").
Exemples dâ€™utilisation :
- git add fichier.txt â†’ ajoute un fichier spÃ©cifique
- git add . â†’ ajoute tous les fichiers modifiÃ©s du rÃ©pertoire courant
- git add -A â†’ ajoute toutes les modifications, y compris les suppressions
Ã€ retenir :
- git add ne sauvegarde pas encore les changements dans lâ€™historique Git. Il faut ensuite faire un git commit.
- Câ€™est une Ã©tape intermÃ©diaire pour sÃ©lectionner prÃ©cisÃ©ment ce quâ€™on veut inclure dans le commit.
>>>>>>> test2

